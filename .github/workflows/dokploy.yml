name: Dokploy Docker Build

on:
  push:
    branches: [master, main, canary]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/dokploy

jobs:
  docker:
    strategy:
      matrix:
        platform:
          - os: ubuntu-22.04
            architecture: amd64
          - os: ubuntu-24.04-arm
            architecture: arm64
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          flavor: |
             suffix=-${{ matrix.platform.architecture }},onlatest=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Prepare env file
        run: |
          cp apps/dokploy/.env.production.example .env.production
          cp apps/dokploy/.env.production.example apps/dokploy/.env.production

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.platform.architecture }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  combine-manifests:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifests
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            TAG="latest"
            docker buildx imagetools create -t ${IMAGE_NAME}:${TAG} \
              ${IMAGE_NAME}:${TAG}-amd64 \
              ${IMAGE_NAME}:${TAG}-arm64

          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION=$(node -p "require('./apps/dokploy/package.json').version")
            docker buildx imagetools create -t ${IMAGE_NAME}:${VERSION} \
              ${IMAGE_NAME}:${TAG}-amd64 \
              ${IMAGE_NAME}:${TAG}-arm64

          elif [ "${{ github.ref }}" = "refs/heads/canary" ]; then
            TAG="canary"
            docker buildx imagetools create -t ${IMAGE_NAME}:${TAG} \
              ${IMAGE_NAME}:${TAG}-amd64 \
              ${IMAGE_NAME}:${TAG}-arm64

          else
            TAG="feature"
            docker buildx imagetools create -t ${IMAGE_NAME}:${TAG} \
              ${IMAGE_NAME}:${TAG}-amd64 \
              ${IMAGE_NAME}:${TAG}-arm64
          fi

  generate-release:
    needs: [combine-manifests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./apps/dokploy/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: ${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
